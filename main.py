import os
import time
import requests
from bs4 import BeautifulSoup
from flask import Flask, request
import telebot
from repet import check_repertoire
from threading import Thread
from bileti import generate_response
from podpis import subscription_manager

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)
user_last_activity = {}

# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
def remind_inactivity():
    while True:
        current_time = time.time()
        for user_id, last_time in list(user_last_activity.items()):
            if current_time - last_time > 3600:  # –ø—Ä–∏–º–µ—Ä —Ç–∞–π–º–∞—É—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ INACTIVITY_TIMEOUT –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                bot.send_message(user_id, "")
                user_last_activity[user_id] = time.time()
        time.sleep(60)


def background_tasks():
    while True:
        try:
            subscription_manager.check_subscriptions(bot)
            time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ —Å—Ä–∞–∑—É
Thread(target=background_tasks, daemon=True).start()
Thread(target=remind_inactivity, daemon=True).start()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
app = Flask(__name__)

@app.route("/", methods=["POST"])
def webhook():
    json_string = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "ok", 200


# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_last_activity[message.chat.id] = time.time()
    bot.send_photo(
        chat_id=message.chat.id,
        photo="https://www.dzerteatr.ru/zdanie_ban3.jpg",
        caption=(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º —É–∑–Ω–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —Å–ø–µ–∫—Ç–∞–∫–ª–∏ –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞ –¥—Ä–∞–º—ã.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è, —è –Ω–∞–π–¥—É –µ–≥–æ –≤ –∞—Ñ–∏—à–µ.\n"
            "–í–∞–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏, –µ—Å–ª–∏ –±–∏–ª–µ—Ç—ã –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏, –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–∫—É–ø–∫–∏."
        )
    )


@bot.message_handler(func=lambda m: True)
def handle_messages(message):
    user_id = message.chat.id
    user_last_activity[user_id] = time.time()

    if message.text.lower() in ["—Å–ø–∞—Å–∏–±–æ", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]:
        bot.reply_to(message, "–†–∞–¥ –ø–æ–º–æ—á—å! üòä")
        return

    check_spectacle(message)


def check_spectacle(message):
    try:
        query = message.text.strip()
        THEATER_URL = os.getenv("THEATER_URL")  # –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ env
        response = requests.get(THEATER_URL, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')

        found = False
        for link in soup.find_all('a'):
            if query.lower() in link.text.lower():
                spectacle_name = link.text
                ticket_url = link['href'] if link['href'].startswith('http') else f"https://quicktickets.ru{link['href']}"

                response_data = generate_response(ticket_url)
                if response_data['reply_markup']:
                    markup = telebot.types.InlineKeyboardMarkup()
                    markup.add(
                        telebot.types.InlineKeyboardButton(
                            text="–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã üéü", url=ticket_url))
                    bot.send_message(
                        message.chat.id,
                        f"üé≠ –ù–∞—à—ë–ª: {spectacle_name}\n{response_data['text']}",
                        reply_markup=markup)
                else:
                    bot.reply_to(message,
                                 f"üé≠ {spectacle_name}\n{response_data['text']}")

                found = True
                break

        if not found:
            bot.reply_to(message,
